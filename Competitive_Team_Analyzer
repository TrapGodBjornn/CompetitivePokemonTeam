import json
from pprint import pprint
from collections import defaultdict



# Load the Pokémon data from pokedex.json
with open("pokedex.json", "r", encoding="utf-8") as f:
    pokemon_data = json.load(f)

with open("converted_uber.json", "r", encoding ="utf-8") as h:
    uber_data = json.load(h)

with open("converted_UU.json", "r", encoding ="utf-8") as k:
    uu_data = json.load(k)

with open("converted_OU.json", "r", encoding ="utf-8") as e:
    ou_data = json.load(e)

cringe = input("Select tier (Uber, OU, or UU): ").lower()


ALL_TYPES = [
    "Normal", "Fire", "Water", "Electric", "Grass",
    "Ice", "Fighting", "Poison", "Ground", "Flying",
    "Psychic", "Bug", "Rock", "Ghost", "Dragon",
    "Dark", "Steel", "Fairy"
]


def type_effectiveness():
    weaknesses = {
        "Water": {"Electric": 2.0, "Grass": 2.0},
        "Fire": {"Water": 2.0, "Rock": 2.0, "Ground": 2.0},
        "Grass": {"Fire": 2.0, "Flying": 2.0, "Bug": 2.0, "Poison": 2.0, "Ice": 2.0},
        "Electric": {"Ground": 2.0},
        "Rock": {"Water": 2.0, "Grass": 2.0, "Fighting": 2.0, "Ground": 2.0, "Steel": 2.0},
        "Ground": {"Water": 2.0, "Grass": 2.0, "Ice": 2.0},
        "Steel": {"Fire": 2.0, "Fighting": 2.0, "Ground": 2.0},
        "Fighting": {"Flying": 2.0, "Psychic": 2.0, "Fairy": 2.0},
        "Flying": {"Electric": 2.0, "Ice": 2.0, "Rock": 2.0},
        "Bug": {"Fire": 2.0, "Flying": 2.0, "Rock": 2.0},
        "Poison": {"Ground": 2.0, "Psychic": 2.0},
        "Ice": {"Fire": 2.0, "Fighting": 2.0, "Rock": 2.0, "Steel": 2.0},
        "Psychic": {"Bug": 2.0, "Ghost": 2.0, "Dark": 2.0},
        "Ghost": {"Ghost": 2.0, "Dark": 2.0},
        "Dark": {"Fighting": 2.0, "Bug": 2.0, "Fairy": 2.0},
        "Dragon": {"Ice": 2.0, "Dragon": 2.0, "Fairy": 2.0},
        "Fairy": {"Poison": 2.0, "Steel": 2.0},
        "Normal": {"Fighting": 2.0},
    }

    strengths = {
        "Water": {"Fire": 2.0, "Rock": 2.0, "Ground": 2.0},
        "Fire": {"Grass": 2.0, "Bug": 2.0, "Ice": 2.0, "Steel": 2.0},
        "Grass": {"Water": 2.0, "Ground": 2.0, "Rock": 2.0},
        "Electric": {"Water": 2.0, "Flying": 2.0},
        "Rock": {"Fire": 2.0, "Ice": 2.0, "Flying": 2.0, "Bug": 2.0},
        "Ground": {"Fire": 2.0, "Electric": 2.0, "Poison": 2.0, "Rock": 2.0, "Steel": 2.0},
        "Steel": {"Ice": 2.0, "Rock": 2.0, "Fairy": 2.0},
        "Fighting": {"Normal": 2.0, "Ice": 2.0, "Rock": 2.0, "Dark": 2.0, "Steel": 2.0},
        "Flying": {"Grass": 2.0, "Fighting": 2.0, "Bug": 2.0},
        "Bug": {"Grass": 2.0, "Psychic": 2.0, "Dark": 2.0},
        "Poison": {"Grass": 2.0, "Fairy": 2.0},
        "Ice": {"Grass": 2.0, "Flying": 2.0, "Dragon": 2.0, "Ground": 2.0},
        "Psychic": {"Fighting": 2.0, "Poison": 2.0},
        "Ghost": {"Psychic": 2.0, "Ghost": 2.0},
        "Dark": {"Psychic": 2.0, "Ghost": 2.0},
        "Dragon": {"Dragon": 2.0},
        "Fairy": {"Fighting": 2.0, "Dragon": 2.0, "Dark": 2.0},
        "Normal": {},
    }

    resistances = {
        "Water": {"Fire": 0.5, "Water": 0.5, "Ice": 0.5, "Steel": 0.5},
        "Fire": {"Fire": 0.5, "Grass": 0.5, "Ice": 0.5, "Bug": 0.5, "Steel": 0.5, "Fairy": 0.5},
        "Grass": {"Water": 0.5, "Grass": 0.5, "Electric": 0.5, "Ground": 0.5},
        "Electric": {"Electric": 0.5, "Steel": 0.5, "Flying": 0.5},
        "Rock": {"Normal": 0.5, "Fire": 0.5, "Flying": 0.5, "Poison": 0.5},
        "Ground": {"Poison": 0.5, "Rock": 0.5},
        "Steel": {"Normal": 0.5, "Grass": 0.5, "Ice": 0.5, "Flying": 0.5, "Psychic": 0.5,
                  "Bug": 0.5, "Rock": 0.5, "Dragon": 0.5, "Steel": 0.5, "Fairy": 0.5},
        "Fighting": {"Bug": 0.5, "Rock": 0.5, "Dark": 0.5},
        "Flying": {"Grass": 0.5, "Fighting": 0.5, "Bug": 0.5},
        "Bug": {"Grass": 0.5, "Fighting": 0.5, "Ground": 0.5},
        "Poison": {"Grass": 0.5, "Fighting": 0.5, "Poison": 0.5, "Bug": 0.5, "Fairy": 0.5},
        "Ice": {"Ice": 0.5},
        "Psychic": {"Fighting": 0.5, "Psychic": 0.5},
        "Ghost": {"Poison": 0.5, "Bug": 0.5},
        "Dark": {"Ghost": 0.5, "Dark": 0.5},
        "Dragon": {"Fire": 0.5, "Water": 0.5, "Electric": 0.5, "Grass": 0.5},
        "Fairy": {"Fighting": 0.5, "Bug": 0.5, "Dark": 0.5},
        "Normal": {},
    }

    immunities = {
        "Water": {},
        "Fire": {},
        "Grass": {},
        "Electric": {},
        "Rock": {},
        "Ground": {"Electric": 0.0},
        "Steel": {"Poison": 0.0},
        "Fighting": {},
        "Flying": {"Ground": 0.0},
        "Bug": {},
        "Poison": {},
        "Ice": {},
        "Psychic": {},
        "Ghost": {"Fighting": 0.0, "Normal": 0.0},
        "Dark": {"Psychic": 0.0},
        "Dragon": {},
        "Fairy": {"Dragon": 0.0},
        "Normal": {"Ghost": 0.0},
    }

    return weaknesses, strengths, resistances, immunities


# Function to get weaknesses
def get_weaknesses(pokemon_name, pokemon_data):
    weaknesses, _, resistances, immunities = type_effectiveness()
    
    # Retrieve Pokémon data
    pokemon = pokemon_data.get(pokemon_name.lower())
    if not pokemon:
        return f"{pokemon_name} not found in data."
    
    # Extract types
    pokemon_types = pokemon.get("types", [])
    if not pokemon_types:
        return f"No types found for {pokemon_name}."
    
    # Initialize sets to store the results
    x4_weak = set()
    x2_weak = set()
    x05_resist = set()
    x0_immune = set()
    neutral = set()
    
    # For each potential attacking type in the game:
    for attacking_type in ALL_TYPES:
        # Start with a 1.0 multiplier
        net_multiplier = 1.0
        
        # For each defensive type 
        for def_type in pokemon_types:
            # 1) Check immunity first (0.0 overrides everything)
            if def_type in immunities:
                if attacking_type in immunities[def_type]:
                    net_multiplier = 0.0
                    break  # no need to check further types
                
            # 2) If not immune, check weaknesses
            if def_type in weaknesses:
                # If attacking_type is in this dictionary, multiply by e.g. 2.0
                net_multiplier *= weaknesses[def_type].get(attacking_type, 1.0)
            
            # 3) Check resistances
            if def_type in resistances:
                # e.g. 0.5 if found
                net_multiplier *= resistances[def_type].get(attacking_type, 1.0)
            
        
        # Net multiplier:
        if net_multiplier == 0.0:
            x0_immune.add(attacking_type)
        elif net_multiplier == 4.0:
            x4_weak.add(attacking_type)
        elif net_multiplier == 2.0:
            x2_weak.add(attacking_type)
        elif net_multiplier == 0.5:
            x05_resist.add(attacking_type)
        #else:
        #    neutral.add(attacking_type)
    
    return {
        "4x": x4_weak,
        "2x": x2_weak,
        "0x": x0_immune,
        "0.5x": x05_resist,
        #"neutral_or_other": neutral
    }




def all_combos(pokemon_data, team_size=6):
    from collections import defaultdict

    resultys = []
    names = []

    totals = {
        "4x": defaultdict(int),
        "2x": defaultdict(int),
        "0x": defaultdict(int),
        "0.5x": defaultdict(int),
    } 

    for i in range(team_size):
        name = input(f"Enter name of Pokemon {i+1} :").strip()
        names.append(name)
        resultado = get_weaknesses(name, pokemon_data)
        resultys.append(resultado)

    print(resultys)

    for res in resultys:
        if isinstance(res, str):
            print("Error cousin", res)
            continue 

        for category in ["4x", "2x", "0.5x", "0x"]:
            for atk_type in res[category]:
                totals[category][atk_type] += 1

    print("\n=== Team Totals ===")
    for category in ["4x", "2x", "0.5x", "0x"]:
        print(f"\n{category} results:")
        lines = []
        for atk_type, count in totals[category].items():
            lines.append(f"{atk_type}({count})")
        if lines:
            print(", ".join(lines))
        else:
            print("None")
    return totals, names

    #Check weaknesses. For (4x), if more than 1, suggest replacement. For (2x), if more than 2, suggest replacement. 
    #Combos
    #If a single (4x), no more than 1 (2x) weakness
    #If there are 2 (2x), no (4x) allowed


def aggregate_roles(tierdata, names, team_size=6):
    """
    Aggregates the roles of team Pokémon based on their primary moveset.
    
    Assumes each Pokémon's data has a "movesets" field, which is an array.
    The primary moveset is taken as the first element, and its "role" is used.
    
    Parameters:
      pokemon_data (dict): A dictionary of Pokémon data keyed by Pokémon name.
      team_size (int): Number of Pokémon to process.
    
    Returns:
      dict: A dictionary (defaultdict(int)) counting the occurrences of each role.
    """
    role_counts = defaultdict(int)

    
    for i in names:
        data = tierdata.get(i)
        if not data:
            print(f"{i} not found in data.")
            continue
        
        if "Movesets" in data and isinstance(data["Movesets"], list) and data["Movesets"]:
            primary_moveset = data["Movesets"][0]
            role = primary_moveset.get("role")
            if role:
                role_counts[role] += 1
                print(f"Added {i} with role {role}.")
            else:
                print(f"{i} has no defined role in its primary moveset.")
        else:
            print(f"{i} has no movesets defined.")
    
    print("\n=== Aggregated Roles ===")
    for role, count in role_counts.items():
        print(f"{role}: {count}")
    
    return role_counts




def analyzer(sponge):
    recommendations = {}

    for atk_type in ALL_TYPES:
        fourx_count = sponge["4x"].get(atk_type, 0)
        twox_count = sponge["2x"].get(atk_type, 0)
        rec = None
        bonus = 1 if fourx_count < 6 and fourx_count > 0 else 0
        weighted_vulnerability = (fourx_count + bonus) + twox_count


        if rec:
            print(f"Adding recommendation for {atk_type}: {rec}")
            recommendations[atk_type] = rec


            

    return recommendations


totals, names = all_combos(pokemon_data, 6)
if cringe == "ou":
    role_totals = aggregate_roles(ou_data, names, team_size=6)
if cringe == "uu":
        role_totals = aggregate_roles(uu_data, names, team_size=6)
if cringe == "uber":
        role_totals = aggregate_roles(uber_data, names, team_size=6)


#recs = analyzer(totals)
#print(f"Final recommendations:, {recs}")




    





                

    

    



    



#Set off to the side for creation of roles and movesets in the JSON file
   # for category in totals:
   #     for atk_type, count in totals[category].items():
   #         if count == 3 and category == "2x":
   #             print (f"\n{atk_type} is a moderate threat as 3 Pokemon are weak to it.")
   #         if count > 3 and category == "2x":
   #             print (f"\n{atk_type} is a large threat as more than half your Pokemon are weak to it.")
            
            

            





#Gonna start leaving my plans here in the form of comments so it's right here
#So now I have to find out which pokemon is weak to what. The manner in which I have set this up allows me to access these so I just have
#to figure out the how. I'm also thinking to label it as if we have 0-2 instances of 2x results, label it as low concern, 3-4 as medium,
#and 5-6 as high. Opposite for .5x. For 4x, anything more than 1 is a red flag. For 0x, not entirely sure, perhaps subtract 1 from 2x.
#The prioritization will be a little difficult but I guess not really if I just make it based on the numbers. Anyways, once I find the 
#areas of concern, I can see the pokemon which are weak to those types, and then suggest possible replacements.
#Will focus on getting this done first, because soon I will also have to implement a function to analyze the team based on what type of
#pokemon they are in the meta, ex if you need a defensive mon, a wallbreaker, etc. Once both are done, will have to find a way 
#to synergize the two and suggest like say a wallbreaker of the specific type, particularly the best ones in the meta. This will likely
#be quite difficult tbh but lets get to work.






#Test the thang (OLD TEST FOR SINGLE)... KEEPING JUST IN CASE FOR IDK WHAT TBH. BRO RIGHT HERE THE VSCODE AI JUST SUGGESTED ME LOL TO FINISH MY SENTENCE. WE'VE COME WAY TOO FAR.
#pokemon_name = input("Enter a Pokémon name: ").strip()
#results = get_weaknesses(pokemon_name, pokemon_data)


#if isinstance(results, str):
#    print(results)  
#else:
#    print(f"4x weaknesses: {', '.join(results['4x'])}")
#    print(f"2x weaknesses: {', '.join(results['2x'])}")
#    print(f"0x immunities: {', '.join(results['0x'])}")
#    print(f"0.5x resistances: {', '.join(results['0.5x'])}")

