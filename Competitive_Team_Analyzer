import json
from pprint import pprint
from collections import defaultdict



# Load the Pokémon data from pokedex.json
with open("pokedex.json", "r", encoding="utf-8") as f:
    pokemon_data = json.load(f)

with open("converted_uber.json", "r", encoding ="utf-8") as h:
    uber_data = json.load(h)

with open("converted_UU.json", "r", encoding ="utf-8") as k:
    uu_data = json.load(k)

with open("converted_OU.json", "r", encoding ="utf-8") as e:
    ou_data = json.load(e)

cringe = input("Select tier (Uber, OU, or UU): ").lower()

pokemon_data=pokemon_data


ALL_TYPES = [
    "Normal", "Fire", "Water", "Electric", "Grass",
    "Ice", "Fighting", "Poison", "Ground", "Flying",
    "Psychic", "Bug", "Rock", "Ghost", "Dragon",
    "Dark", "Steel", "Fairy"
]

# Add tier rankings as a global constant
TIER_RANKINGS = {
    "S": 7,
    "S-": 6,
    "A+": 5,
    "A": 4,
    "A-": 3,
    "B+": 2,
    "B": 1,
    "Unknown": 0
}


def type_effectiveness():
    weaknesses = {
        "Water": {"Electric": 2.0, "Grass": 2.0},
        "Fire": {"Water": 2.0, "Rock": 2.0, "Ground": 2.0},
        "Grass": {"Fire": 2.0, "Flying": 2.0, "Bug": 2.0, "Poison": 2.0, "Ice": 2.0},
        "Electric": {"Ground": 2.0},
        "Rock": {"Water": 2.0, "Grass": 2.0, "Fighting": 2.0, "Ground": 2.0, "Steel": 2.0},
        "Ground": {"Water": 2.0, "Grass": 2.0, "Ice": 2.0},
        "Steel": {"Fire": 2.0, "Fighting": 2.0, "Ground": 2.0},
        "Fighting": {"Flying": 2.0, "Psychic": 2.0, "Fairy": 2.0},
        "Flying": {"Electric": 2.0, "Ice": 2.0, "Rock": 2.0},
        "Bug": {"Fire": 2.0, "Flying": 2.0, "Rock": 2.0},
        "Poison": {"Ground": 2.0, "Psychic": 2.0},
        "Ice": {"Fire": 2.0, "Fighting": 2.0, "Rock": 2.0, "Steel": 2.0},
        "Psychic": {"Bug": 2.0, "Ghost": 2.0, "Dark": 2.0},
        "Ghost": {"Ghost": 2.0, "Dark": 2.0},
        "Dark": {"Fighting": 2.0, "Bug": 2.0, "Fairy": 2.0},
        "Dragon": {"Ice": 2.0, "Dragon": 2.0, "Fairy": 2.0},
        "Fairy": {"Poison": 2.0, "Steel": 2.0},
        "Normal": {"Fighting": 2.0},
    }

    strengths = {
        "Water": {"Fire": 2.0, "Rock": 2.0, "Ground": 2.0},
        "Fire": {"Grass": 2.0, "Bug": 2.0, "Ice": 2.0, "Steel": 2.0},
        "Grass": {"Water": 2.0, "Ground": 2.0, "Rock": 2.0},
        "Electric": {"Water": 2.0, "Flying": 2.0},
        "Rock": {"Fire": 2.0, "Ice": 2.0, "Flying": 2.0, "Bug": 2.0},
        "Ground": {"Fire": 2.0, "Electric": 2.0, "Poison": 2.0, "Rock": 2.0, "Steel": 2.0},
        "Steel": {"Ice": 2.0, "Rock": 2.0, "Fairy": 2.0},
        "Fighting": {"Normal": 2.0, "Ice": 2.0, "Rock": 2.0, "Dark": 2.0, "Steel": 2.0},
        "Flying": {"Grass": 2.0, "Fighting": 2.0, "Bug": 2.0},
        "Bug": {"Grass": 2.0, "Psychic": 2.0, "Dark": 2.0},
        "Poison": {"Grass": 2.0, "Fairy": 2.0},
        "Ice": {"Grass": 2.0, "Flying": 2.0, "Dragon": 2.0, "Ground": 2.0},
        "Psychic": {"Fighting": 2.0, "Poison": 2.0},
        "Ghost": {"Psychic": 2.0, "Ghost": 2.0},
        "Dark": {"Psychic": 2.0, "Ghost": 2.0},
        "Dragon": {"Dragon": 2.0},
        "Fairy": {"Fighting": 2.0, "Dragon": 2.0, "Dark": 2.0},
        "Normal": {},
    }

    resistances = {
        "Water": {"Fire": 0.5, "Water": 0.5, "Ice": 0.5, "Steel": 0.5},
        "Fire": {"Fire": 0.5, "Grass": 0.5, "Ice": 0.5, "Bug": 0.5, "Steel": 0.5, "Fairy": 0.5},
        "Grass": {"Water": 0.5, "Grass": 0.5, "Electric": 0.5, "Ground": 0.5},
        "Electric": {"Electric": 0.5, "Steel": 0.5, "Flying": 0.5},
        "Rock": {"Normal": 0.5, "Fire": 0.5, "Flying": 0.5, "Poison": 0.5},
        "Ground": {"Poison": 0.5, "Rock": 0.5},
        "Steel": {"Normal": 0.5, "Grass": 0.5, "Ice": 0.5, "Flying": 0.5, "Psychic": 0.5,
                  "Bug": 0.5, "Rock": 0.5, "Dragon": 0.5, "Steel": 0.5, "Fairy": 0.5},
        "Fighting": {"Bug": 0.5, "Rock": 0.5, "Dark": 0.5},
        "Flying": {"Grass": 0.5, "Fighting": 0.5, "Bug": 0.5},
        "Bug": {"Grass": 0.5, "Fighting": 0.5, "Ground": 0.5},
        "Poison": {"Grass": 0.5, "Fighting": 0.5, "Poison": 0.5, "Bug": 0.5, "Fairy": 0.5},
        "Ice": {"Ice": 0.5},
        "Psychic": {"Fighting": 0.5, "Psychic": 0.5},
        "Ghost": {"Poison": 0.5, "Bug": 0.5},
        "Dark": {"Ghost": 0.5, "Dark": 0.5},
        "Dragon": {"Fire": 0.5, "Water": 0.5, "Electric": 0.5, "Grass": 0.5},
        "Fairy": {"Fighting": 0.5, "Bug": 0.5, "Dark": 0.5},
        "Normal": {},
    }

    immunities = {
        "Water": {},
        "Fire": {},
        "Grass": {},
        "Electric": {},
        "Rock": {},
        "Ground": {"Electric": 0.0},
        "Steel": {"Poison": 0.0},
        "Fighting": {},
        "Flying": {"Ground": 0.0},
        "Bug": {},
        "Poison": {},
        "Ice": {},
        "Psychic": {},
        "Ghost": {"Fighting": 0.0, "Normal": 0.0},
        "Dark": {"Psychic": 0.0},
        "Dragon": {},
        "Fairy": {"Dragon": 0.0},
        "Normal": {"Ghost": 0.0},
    }

    return weaknesses, strengths, resistances, immunities


# Function to get weaknesses
def get_weaknesses(pokemon_name, pokemon_data):
    weaknesses, _, resistances, immunities = type_effectiveness()
    
    # Retrieve Pokémon data
    pokemon = pokemon_data.get(pokemon_name.lower())
    if not pokemon:
        return f"{pokemon_name} not found in data."
    
    # Extract types
    pokemon_types = pokemon.get("types", [])
    if not pokemon_types:
        return f"No types found for {pokemon_name}."
    
    # Initialize sets to store the results
    x4_weak = set()
    x2_weak = set()
    x05_resist = set()
    x0_immune = set()
    neutral = set()
    
    # For each potential attacking type in the game:
    for attacking_type in ALL_TYPES:
        # Start with a 1.0 multiplier
        net_multiplier = 1.0
        
        # For each defensive type 
        for def_type in pokemon_types:
            # 1) Check immunity first (0.0 overrides everything)
            if def_type in immunities:
                if attacking_type in immunities[def_type]:
                    net_multiplier = 0.0
                    break  # no need to check further types
                
            # 2) If not immune, check weaknesses
            if def_type in weaknesses:
                # If attacking_type is in this dictionary, multiply by e.g. 2.0
                net_multiplier *= weaknesses[def_type].get(attacking_type, 1.0)
            
            # 3) Check resistances
            if def_type in resistances:
                # e.g. 0.5 if found
                net_multiplier *= resistances[def_type].get(attacking_type, 1.0)
            
        
        # Net multiplier:
        if net_multiplier == 0.0:
            x0_immune.add(attacking_type)
        elif net_multiplier == 4.0:
            x4_weak.add(attacking_type)
        elif net_multiplier == 2.0:
            x2_weak.add(attacking_type)
        elif net_multiplier == 0.5:
            x05_resist.add(attacking_type)
        #else:
        #    neutral.add(attacking_type)
    
    return {
        "4x": x4_weak,
        "2x": x2_weak,
        "0x": x0_immune,
        "0.5x": x05_resist,
        #"neutral_or_other": neutral
    }




def all_combos(pokemon_data, team_size=6):
    from collections import defaultdict

    resultys = []
    names = []

    totals = {
        "4x": defaultdict(int),
        "2x": defaultdict(int),
        "0x": defaultdict(int),
        "0.5x": defaultdict(int),
    } 

    for i in range(team_size):
        name = input(f"Enter name of Pokemon {i+1} :").strip()
        names.append(name)
        resultado = get_weaknesses(name, pokemon_data)
        resultys.append(resultado)

    print(resultys)

    for res in resultys:
        if isinstance(res, str):
            print("Error cousin", res)
            continue 

        for category in ["4x", "2x", "0.5x", "0x"]:
            for atk_type in res[category]:
                totals[category][atk_type] += 1

    print("\n=== Team Totals ===")
    for category in ["4x", "2x", "0.5x", "0x"]:
        print(f"\n{category} results:")
        lines = []
        for atk_type, count in totals[category].items():
            lines.append(f"{atk_type}({count})")
        if lines:
            print(", ".join(lines))
        else:
            print("None")
    return totals, names

    #Check weaknesses. For (4x), if more than 1, suggest replacement. For (2x), if more than 2, suggest replacement. 
    #Combos
    #If a single (4x), no more than 1 (2x) weakness
    #If there are 2 (2x), no (4x) allowed


def aggregate_roles(tierdata, names, team_size=6):
    """
    Aggregates the roles of team Pokémon based on their primary moveset.
    
    Assumes each Pokémon's data has a "movesets" field, which is an array.
    The primary moveset is taken as the first element, and its "role" is used.
    
    Parameters:
      pokemon_data (dict): A dictionary of Pokémon data keyed by Pokémon name.
      team_size (int): Number of Pokémon to process.
    
    Returns:
      dict: A dictionary (defaultdict(int)) counting the occurrences of each role.
    """
    role_counts = defaultdict(int)

    
    for i in names:
        data = tierdata.get(i)
        if not data:
            print(f"{i} not found in data.")
            continue
        
        if "Movesets" in data and isinstance(data["Movesets"], list) and data["Movesets"]:
            primary_moveset = data["Movesets"][0]
            role = primary_moveset.get("role")
            if role:
                role_counts[role] += 1
                print(f"Added {i} with role {role}.")
            else:
                print(f"{i} has no defined role in its primary moveset.")
        else:
            print(f"{i} has no movesets defined.")
    
    print("\n=== Aggregated Roles ===")
    for role, count in role_counts.items():
        print(f"{role}: {count}")
    
    return role_counts


def calculate_vulnerability_multiplier(num_weak_pokemon):
    """Returns multiplier based on how many Pokemon share a weakness"""
    if num_weak_pokemon >= 6: return 2.5
    if num_weak_pokemon == 5: return 2.0
    if num_weak_pokemon == 4: return 1.5
    if num_weak_pokemon == 3: return 1.2
    return 1.0

def calculate_role_multiplier(num_same_role):
    """Returns multiplier for role overlap"""
    if num_same_role >= 4: return 2.0
    if num_same_role == 3: return 1.5
    return 0

def calculate_pokemon_score(pokemon, team_weaknesses, role_counts, tier_data):
    """Calculate how problematic a Pokemon is based on its weaknesses and role"""
    score = 0
    weaknesses = get_weaknesses(pokemon, pokemon_data)
    
    # Type vulnerability score
    for type, pokemon_weak in team_weaknesses.items():
        if pokemon in pokemon_weak:
            num_weak = len(pokemon_weak)
            multiplier = calculate_vulnerability_multiplier(num_weak)
            
            if isinstance(weaknesses, dict):
                if type in weaknesses['4x']:
                    score += 2 * multiplier
                elif type in weaknesses['2x']:
                    score += 1 * multiplier
    
    # Role score
    mon_data = tier_data.get(pokemon)
    if mon_data and "Movesets" in mon_data and mon_data["Movesets"]:
        role = mon_data["Movesets"][0].get("role")
        if role in role_counts:
            score += 5 * calculate_role_multiplier(role_counts[role])
    
    return score

def calculate_candidate_score(candidate, problem_types, needed_role, tier_data):
    """Calculate how good a replacement a candidate would be"""
    score = 0
    pokemon_data = tier_data.get(candidate['name'])
    if not pokemon_data:
        return 0
        
    # Base tier score
    tier_score = TIER_RANKINGS.get(pokemon_data.get("tier_usage", "B"), 0)
    score += tier_score * 3
    
    # Type resistance scoring
    resisted_types = 0
    candidate_types = pokemon_data.get("typing", [])
    _, _, resistances, immunities = type_effectiveness()
    
    for prob_type in problem_types:
        for type in candidate_types:
            if (prob_type in resistances.get(type, {}) or 
                prob_type in immunities.get(type, {})):
                resisted_types += 1
                break
    
    # Bonus for resisting multiple types
    if resisted_types > 0:
        type_score = resisted_types * 5
        type_score *= (1 + (resisted_types - 1) * 0.5)
        score += type_score
    
    # Role score
    if needed_role and "Movesets" in pokemon_data and pokemon_data["Movesets"]:
        if pokemon_data["Movesets"][0].get("role") != needed_role:
            score += 4
    
    return score

def get_replacement_threshold(scores):
    max_score = max(scores.values())
    if max_score >= 8.0:  # Highly problematic team
        return 6.0  # Will catch Pokemon with significant issues
    elif max_score >= 5.0:  # Moderately problematic
        return 4.0
    else:  # Minor issues
        return 2.0

def analyzer(sponge, role_totals, names, tier_choice):
    global pokemon_data
    
    # Map user's tier choice to correct data
    tier_data = {
        "uber": uber_data,
        "ou": ou_data,
        "uu": uu_data
    }[tier_choice.lower()]

    # First identify all problem types
    problem_types = {}
    for atk_type in ALL_TYPES:
        fourx_weak = []
        twox_weak = []
        
        for name in names:
            weaknesses = get_weaknesses(name, pokemon_data)
            if isinstance(weaknesses, dict):
                if atk_type in weaknesses['4x']:
                    fourx_weak.append(name)
                elif atk_type in weaknesses['2x']:
                    twox_weak.append(name)
        
        total_weak = len(fourx_weak) + len(twox_weak)
        if total_weak > 2:  # This is a problem type
            problem_types[atk_type] = {
                "fourx": fourx_weak,
                "twox": twox_weak,
                "total": total_weak,
                "excess": total_weak - 2
            }
            print(f"\nVulnerability to {atk_type}: {total_weak} Pokemon")
            if fourx_weak:
                print(f"4x weak: {', '.join(fourx_weak)}")
            print(f"2x weak: {', '.join(twox_weak)}")

    # Count how many problem types each Pokemon is weak to
    pokemon_problem_count = defaultdict(lambda: {"problem_types": set(), "role": None})
    
    for atk_type, data in problem_types.items():
        for pokemon in data["fourx"]:
            pokemon_problem_count[pokemon]["problem_types"].add(atk_type)
        for pokemon in data["twox"]:
            pokemon_problem_count[pokemon]["problem_types"].add(atk_type)
    
    # Add role information but don't count it in initial prioritization
    for role, count in role_totals.items():
        if count > 2:
            for name in names:
                mon_data = tier_data.get(name)
                if mon_data and "Movesets" in mon_data and mon_data["Movesets"]:
                    if mon_data["Movesets"][0].get("role") == role:
                        pokemon_problem_count[name]["role"] = role

    # Sort Pokemon by number of problem types they're weak to
    replacement_order = []
    for pokemon, issues in pokemon_problem_count.items():
        if issues["problem_types"]:  # Only consider Pokemon with problem type weaknesses
            tier = tier_data.get(pokemon, {}).get("tier_usage", "B")
            tier_rank = TIER_RANKINGS.get(tier, 0)
            replacement_order.append((
                pokemon, 
                len(issues["problem_types"]),
                -tier_rank,  # Negative so higher tiers are replaced first
                issues
            ))
    
    replacement_order.sort(key=lambda x: (x[1], x[2]), reverse=True)
    print("\nPokemon ordered by problem type contributions:")
    for pokemon, num_problems, _, issues in replacement_order:
        print(f"{pokemon}: weak to {len(issues['problem_types'])} weaknesses: {', '.join(issues['problem_types'])}")

    # Create replacement candidates list
    replacement_candidates = []
    for pokemon_name, tier_mon_data in tier_data.items():
        tier_rank = TIER_RANKINGS.get(tier_mon_data.get("tier_usage", "Unknown"), 0)
        replacement_candidates.append({
            "name": pokemon_name,
            "tier_rank": tier_rank,
            "tier": tier_mon_data.get("tier_usage", "B")
        })
    
    # Sort candidates by tier ranking
    replacement_candidates.sort(key=lambda x: x["tier_rank"], reverse=True)

    # Gather team weaknesses
    team_weaknesses = defaultdict(list)
    for name in names:
        weaknesses = get_weaknesses(name, pokemon_data)
        if isinstance(weaknesses, dict):
            for type in ALL_TYPES:
                if type in weaknesses['4x'] or type in weaknesses['2x']:
                    team_weaknesses[type].append(name)
    
    # Calculate scores for current team members
    pokemon_scores = {}
    for pokemon in names:
        score = calculate_pokemon_score(pokemon, team_weaknesses, role_totals, tier_data)
        pokemon_scores[pokemon] = score
    
    # Sort Pokemon by their problematic score, using tier as secondary sort
    sorted_pokemon = sorted(
        [(pokemon, score, TIER_RANKINGS.get(tier_data.get(pokemon, {}).get("tier_usage", "B"), 0)) 
         for pokemon, score in pokemon_scores.items()],
        key=lambda x: (x[1], -x[2]),  # Sort by score first, then by negative tier rank
        reverse=True
    )
    
    print("\n=== Pokemon Scores (Higher = More Problematic) ===")
    for pokemon, score, _ in sorted_pokemon:
        print(f"{pokemon}: {score:.2f}")
    
    # Calculate baseline threshold based on team average
    average_score = sum(pokemon_scores.values()) / len(pokemon_scores)
    # Set threshold at 1.5x average or minimum of 2.0, whichever is higher
    replacement_threshold = get_replacement_threshold(pokemon_scores)
    
    # Check for missing essential roles
    essential_roles = {
        "Physical Wall": False,
        "Special Wall": False,
        "Physical Attacker": False,
        "Special Attacker": False
    }
    
    for role, count in role_totals.items():
        if role in essential_roles:
            essential_roles[role] = count > 0
    
    # Add warnings for missing roles with examples
    warnings = []
    for role, has_role in essential_roles.items():
        if not has_role:
            example = None
            for mon, data in tier_data.items():
                if "Movesets" in data and data["Movesets"] and data["Movesets"][0].get("role") == role:
                    example = f"{mon} ({data.get('tier_usage', 'Unknown')})"
                    break
            if example:
                warnings.append(f"Warning: Team has no {role}. Example of this role: {example}")
    
    # Check for hazard removal
    has_hazard_removal = False
    hazard_removal_moves = {"Defog", "Rapid Spin"}
    for name in names:
        mon_data = tier_data.get(name)
        if mon_data and "Movesets" in mon_data and mon_data["Movesets"]:
            moveset = mon_data["Movesets"][0]
            if "Moves" in moveset:
                for move_entry in moveset["Moves"]:
                    # Handle different possible move formats
                    if isinstance(move_entry, str):
                        # Clean up the move string
                        move_parts = move_entry.replace(":", "").split()
                        # Remove numbers and clean up
                        move_name = " ".join(part for part in move_parts if not part[0].isdigit()).strip()
                        if any(hazard_move.lower() in move_name.lower() for hazard_move in hazard_removal_moves):
                            has_hazard_removal = True
                            break
        if has_hazard_removal:
            break
    
    if not has_hazard_removal:
        warnings.append("Warning: No hazard removal moves (Defog/Rapid Spin) found. Team may be susceptible to entry hazards.")
    
    # Check for Lead role
    has_lead = False
    for role, count in role_totals.items():
        if role == "Lead":
            has_lead = True
            break
    
    if not has_lead:
        # Find an example Lead
        example = None
        for mon, data in tier_data.items():
            if "Movesets" in data and data["Movesets"] and data["Movesets"][0].get("role") == "Lead":
                example = f"{mon} ({data.get('tier_usage', 'Unknown')})"
                break
        if example:
            warnings.append(f"Note: Consider adding a Lead for entry hazard control. Example: {example}")
    
    # Print warnings before balance check
    if warnings:
        print("\nRole Coverage Warnings:")
        for warning in warnings:
            print(f"• {warning}")
    
    # Check if team is well-balanced
    is_balanced = True
    
    # Check type balance
    for type, pokemon_list in team_weaknesses.items():
        if len(pokemon_list) > 2:
            is_balanced = False
            break
    
    # Check role balance and coverage
    for role, count in role_totals.items():
        if count > 2:
            is_balanced = False
            break
    
    if is_balanced:
        print("\n══════════════════════════════════════")
        print("Team is well-balanced!")
        print("• No type has more than 2 Pokemon weak to it")
        print("• No role has more than 2 Pokemon")
        print("\nNo changes recommended.")
        print("══════════════════════════════════════")
        return {}
        
    # Track all suggested replacements to ensure uniqueness
    suggested_replacements = set()
    to_replace = {}
    
    print(f"\nReplacement threshold score: {replacement_threshold:.2f}")
    
    for pokemon, score, _ in sorted_pokemon:
        if (score >= replacement_threshold or 
            (score >= 5.0 and len(to_replace) < 4)):
            weaknesses = get_weaknesses(pokemon, pokemon_data)
            if isinstance(weaknesses, dict):
                current_role = None
                mon_data = tier_data.get(pokemon)
                if mon_data and "Movesets" in mon_data and mon_data["Movesets"]:
                    current_role = mon_data["Movesets"][0].get("role")
                
                # Find best replacements that haven't been suggested yet
                candidate_scores = []
                for candidate in replacement_candidates:
                    if (candidate['name'] != pokemon and 
                        candidate['name'] not in suggested_replacements and
                        candidate['name'] not in names):
                        candidate_score = calculate_candidate_score(
                            candidate,
                            [type for type in problem_types if pokemon in team_weaknesses[type]],
                            current_role if role_totals.get(current_role, 0) > 2 else None,
                            tier_data
                        )
                        if candidate_score > 0:
                            candidate_scores.append((candidate, candidate_score))
                
                # Sort and get top replacements
                candidate_scores.sort(key=lambda x: x[1], reverse=True)
                if candidate_scores and len(to_replace) < 4:
                    replacements = []
                    for candidate, cand_score in candidate_scores[:3]:
                        tier = tier_data.get(candidate['name'], {}).get("tier_usage", "Unknown")
                        improvement = cand_score - score
                        replacements.append(f"{candidate['name']} ({tier}) [Score improvement: +{improvement:.1f}]")
                        suggested_replacements.add(candidate['name'])
                    
                    if replacements:
                        to_replace[pokemon] = {
                            'reason': f"Problem Score: {score:.2f}" + 
                                    (f" (Above threshold of {replacement_threshold:.2f})" if score >= replacement_threshold else 
                                     " (Additional replacement needed for team balance)"),
                            'replacements': replacements
                        }
        
        elif score > 0:  # For Pokemon with issues but below threshold
            print(f"\nNote: {pokemon} has minor issues (Score: {score:.2f}) but below replacement threshold")

    # Print recommendations with additional context
    if to_replace:
        print("\n══════════════════════════════════════")
        print("     RECOMMENDED TEAM CHANGES")
        print("══════════════════════════════════════")
        
        print(f"\nFound {len(suggested_replacements)} unique replacement suggestions")
        print("\nOverview:")
        for pokemon, info in to_replace.items():
            print(f"• {pokemon} - {info['reason']}")
        
        print("\nDetailed Recommendations:")
        for pokemon, info in to_replace.items():
            print(f"\n{'-'*50}")
            print(f"Replace: {pokemon.upper()}")
            print(f"Reason: {info['reason']}")
            print("\nSuggested replacements (with improvement scores):")
            for replacement in info['replacements']:
                print(f"  ▶ {replacement}")
        
        print(f"\n{'-'*50}")
        print("Note: Consider implementing changes in order shown above")
        print("══════════════════════════════════════")
    
    return to_replace

def find_replacements(pokemon, weakness_types, current_role, tier_data, replacement_candidates):
    """Find replacement Pokemon that address both type and role issues"""
    replacements = []
    _, _, resistances, immunities = type_effectiveness()
    
    print(f"\nFinding replacements for {pokemon}:")
    print(f"Must resist: {', '.join(weakness_types)}")
    if current_role:
        print(f"Must not have role: {current_role}")
    
    for candidate in replacement_candidates:
        pokemon_data = tier_data.get(candidate['name'])
        if not pokemon_data or candidate['name'] == pokemon:
            continue
        
        # Check type resistances
        resists_all = True
        candidate_types = pokemon_data.get("typing", [])
        
        for weakness_type in weakness_types:
            resists_this_type = False
            for type in candidate_types:
                if (weakness_type in resistances.get(type, {}) or 
                    weakness_type in immunities.get(type, {})):
                    resists_this_type = True
                    break
            if not resists_this_type:
                resists_all = False
                break
        
        # Check role
        valid_role = True
        if current_role and "Movesets" in pokemon_data and pokemon_data["Movesets"]:
            if pokemon_data["Movesets"][0].get("role") == current_role:
                valid_role = False
        
        if resists_all and valid_role:
            tier = pokemon_data.get("tier_usage", "Unknown")
            replacements.append(f"{candidate['name']} ({tier})")
            if len(replacements) >= 3:
                break
    
    return replacements

"""def analyz(sponge):
    recommendations = {}

    for atk_type in ALL_TYPES:
        fourx_count = sponge["4x"].get(atk_type, 0)
        twox_count = sponge["2x"].get(atk_type, 0)
        rec = None
        bonus = 1 if fourx_count < 6 and fourx_count > 0 else 0
        weighted_vulnerability = (fourx_count + bonus) + twox_count


        if rec:
            print(f"Adding recommendation for {atk_type}: {rec}")
            recommendations[atk_type] = rec


            

    return recommendations
"""

totals, names = all_combos(pokemon_data, 6)

# Initialize role_totals based on tier choice
role_totals = None
if cringe == "ou":
    role_totals = aggregate_roles(ou_data, names, team_size=6)
elif cringe == "uu":
    role_totals = aggregate_roles(uu_data, names, team_size=6)
elif cringe == "uber":
    role_totals = aggregate_roles(uber_data, names, team_size=6)

if role_totals is None:  # Add error handling
    print("Error: Invalid tier selected")
else:
    analyzer(totals, role_totals, names, cringe)

#recs = analyzer(totals)
#print(f"Final recommendations:, {recs}")




    





                

    

    



    



#Set off to the side for creation of roles and movesets in the JSON file
   # for category in totals:
   #     for atk_type, count in totals[category].items():
   #         if count == 3 and category == "2x":
   #             print (f"\n{atk_type} is a moderate threat as 3 Pokemon are weak to it.")
   #         if count > 3 and category == "2x":
   #             print (f"\n{atk_type} is a large threat as more than half your Pokemon are weak to it.")
            
            
            

            
"""def ana(totals):
    recommendations = []
    
    # Analyze 4x weaknesses
    if '4x' in totals:
        for type, count in totals['4x'].items():
            if count >= 1:
                recommendations.append(f"Critical: {count} Pokemon have 4x weakness to {type}")
    
    # Analyze 2x weaknesses
    if '2x' in totals:
        for type, count in totals['2x'].items():
"""





#Gonna start leaving my plans here in the form of comments so it's right here
#So now I have to find out which pokemon is weak to what. The manner in which I have set this up allows me to access these so I just have
#to figure out the how. I'm also thinking to label it as if we have 0-2 instances of 2x results, label it as low concern, 3-4 as medium,
#and 5-6 as high. Opposite for .5x. For 4x, anything more than 1 is a red flag. For 0x, not entirely sure, perhaps subtract 1 from 2x.
#The prioritization will be a little difficult but I guess not really if I just make it based on the numbers. Anyways, once I find the 
#areas of concern, I can see the pokemon which are weak to those types, and then suggest possible replacements.
#Will focus on getting this done first, because soon I will also have to implement a function to analyze the team based on what type of
#pokemon they are in the meta, ex if you need a defensive mon, a wallbreaker, etc. Once both are done, will have to find a way 
#to synergize the two and suggest like say a wallbreaker of the specific type, particularly the best ones in the meta. This will likely
#be quite difficult tbh but lets get to work.






#Test the thang (OLD TEST FOR SINGLE)... KEEPING JUST IN CASE FOR IDK WHAT TBH. BRO RIGHT HERE THE VSCODE AI JUST SUGGESTED ME LOL TO FINISH MY SENTENCE. WE'VE COME WAY TOO FAR.
#pokemon_name = input("Enter a Pokémon name: ").strip()
#results = get_weaknesses(pokemon_name, pokemon_data)


#if isinstance(results, str):
#    print(results)  
#else:
#    print(f"4x weaknesses: {', '.join(results['4x'])}")
#    print(f"2x weaknesses: {', '.join(results['2x'])}")
#    print(f"0x immunities: {', '.join(results['0x'])}")
#    print(f"0.5x resistances: {', '.join(results['0.5x'])}")

